
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `Gym` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Gym
 * 
 */
export type GymModel = runtime.Types.Result.DefaultSelection<Prisma.$GymPayload>

export type AggregateGym = {
  _count: GymCountAggregateOutputType | null
  _avg: GymAvgAggregateOutputType | null
  _sum: GymSumAggregateOutputType | null
  _min: GymMinAggregateOutputType | null
  _max: GymMaxAggregateOutputType | null
}

export type GymAvgAggregateOutputType = {
  latitude: runtime.Decimal | null
  longitude: runtime.Decimal | null
}

export type GymSumAggregateOutputType = {
  latitude: runtime.Decimal | null
  longitude: runtime.Decimal | null
}

export type GymMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  phone: string | null
  latitude: runtime.Decimal | null
  longitude: runtime.Decimal | null
}

export type GymMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  phone: string | null
  latitude: runtime.Decimal | null
  longitude: runtime.Decimal | null
}

export type GymCountAggregateOutputType = {
  id: number
  title: number
  description: number
  phone: number
  latitude: number
  longitude: number
  _all: number
}


export type GymAvgAggregateInputType = {
  latitude?: true
  longitude?: true
}

export type GymSumAggregateInputType = {
  latitude?: true
  longitude?: true
}

export type GymMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  phone?: true
  latitude?: true
  longitude?: true
}

export type GymMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  phone?: true
  latitude?: true
  longitude?: true
}

export type GymCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  phone?: true
  latitude?: true
  longitude?: true
  _all?: true
}

export type GymAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Gym to aggregate.
   */
  where?: Prisma.GymWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Gyms to fetch.
   */
  orderBy?: Prisma.GymOrderByWithRelationInput | Prisma.GymOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GymWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Gyms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Gyms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Gyms
  **/
  _count?: true | GymCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GymAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GymSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GymMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GymMaxAggregateInputType
}

export type GetGymAggregateType<T extends GymAggregateArgs> = {
      [P in keyof T & keyof AggregateGym]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGym[P]>
    : Prisma.GetScalarType<T[P], AggregateGym[P]>
}




export type GymGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GymWhereInput
  orderBy?: Prisma.GymOrderByWithAggregationInput | Prisma.GymOrderByWithAggregationInput[]
  by: Prisma.GymScalarFieldEnum[] | Prisma.GymScalarFieldEnum
  having?: Prisma.GymScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GymCountAggregateInputType | true
  _avg?: GymAvgAggregateInputType
  _sum?: GymSumAggregateInputType
  _min?: GymMinAggregateInputType
  _max?: GymMaxAggregateInputType
}

export type GymGroupByOutputType = {
  id: string
  title: string
  description: string | null
  phone: string | null
  latitude: runtime.Decimal
  longitude: runtime.Decimal
  _count: GymCountAggregateOutputType | null
  _avg: GymAvgAggregateOutputType | null
  _sum: GymSumAggregateOutputType | null
  _min: GymMinAggregateOutputType | null
  _max: GymMaxAggregateOutputType | null
}

type GetGymGroupByPayload<T extends GymGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GymGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GymGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GymGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GymGroupByOutputType[P]>
      }
    >
  > 



export type GymWhereInput = {
  AND?: Prisma.GymWhereInput | Prisma.GymWhereInput[]
  OR?: Prisma.GymWhereInput[]
  NOT?: Prisma.GymWhereInput | Prisma.GymWhereInput[]
  id?: Prisma.StringFilter<"Gym"> | string
  title?: Prisma.StringFilter<"Gym"> | string
  description?: Prisma.StringNullableFilter<"Gym"> | string | null
  phone?: Prisma.StringNullableFilter<"Gym"> | string | null
  latitude?: Prisma.DecimalFilter<"Gym"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  longitude?: Prisma.DecimalFilter<"Gym"> | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type GymOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
}

export type GymWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.GymWhereInput | Prisma.GymWhereInput[]
  OR?: Prisma.GymWhereInput[]
  NOT?: Prisma.GymWhereInput | Prisma.GymWhereInput[]
  title?: Prisma.StringFilter<"Gym"> | string
  description?: Prisma.StringNullableFilter<"Gym"> | string | null
  phone?: Prisma.StringNullableFilter<"Gym"> | string | null
  latitude?: Prisma.DecimalFilter<"Gym"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  longitude?: Prisma.DecimalFilter<"Gym"> | runtime.Decimal | runtime.DecimalJsLike | number | string
}, "id">

export type GymOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  _count?: Prisma.GymCountOrderByAggregateInput
  _avg?: Prisma.GymAvgOrderByAggregateInput
  _max?: Prisma.GymMaxOrderByAggregateInput
  _min?: Prisma.GymMinOrderByAggregateInput
  _sum?: Prisma.GymSumOrderByAggregateInput
}

export type GymScalarWhereWithAggregatesInput = {
  AND?: Prisma.GymScalarWhereWithAggregatesInput | Prisma.GymScalarWhereWithAggregatesInput[]
  OR?: Prisma.GymScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GymScalarWhereWithAggregatesInput | Prisma.GymScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Gym"> | string
  title?: Prisma.StringWithAggregatesFilter<"Gym"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Gym"> | string | null
  phone?: Prisma.StringNullableWithAggregatesFilter<"Gym"> | string | null
  latitude?: Prisma.DecimalWithAggregatesFilter<"Gym"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  longitude?: Prisma.DecimalWithAggregatesFilter<"Gym"> | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type GymCreateInput = {
  id?: string
  title: string
  description?: string | null
  phone?: string | null
  latitude: runtime.Decimal | runtime.DecimalJsLike | number | string
  longitude: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type GymUncheckedCreateInput = {
  id?: string
  title: string
  description?: string | null
  phone?: string | null
  latitude: runtime.Decimal | runtime.DecimalJsLike | number | string
  longitude: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type GymUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  latitude?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  longitude?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type GymUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  latitude?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  longitude?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type GymCreateManyInput = {
  id?: string
  title: string
  description?: string | null
  phone?: string | null
  latitude: runtime.Decimal | runtime.DecimalJsLike | number | string
  longitude: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type GymUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  latitude?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  longitude?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type GymUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  latitude?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  longitude?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type GymCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
}

export type GymAvgOrderByAggregateInput = {
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
}

export type GymMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
}

export type GymMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
}

export type GymSumOrderByAggregateInput = {
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}



export type GymSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  phone?: boolean
  latitude?: boolean
  longitude?: boolean
}, ExtArgs["result"]["gym"]>

export type GymSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  phone?: boolean
  latitude?: boolean
  longitude?: boolean
}, ExtArgs["result"]["gym"]>

export type GymSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  phone?: boolean
  latitude?: boolean
  longitude?: boolean
}, ExtArgs["result"]["gym"]>

export type GymSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  phone?: boolean
  latitude?: boolean
  longitude?: boolean
}

export type GymOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "phone" | "latitude" | "longitude", ExtArgs["result"]["gym"]>

export type $GymPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Gym"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string | null
    phone: string | null
    latitude: runtime.Decimal
    longitude: runtime.Decimal
  }, ExtArgs["result"]["gym"]>
  composites: {}
}

export type GymGetPayload<S extends boolean | null | undefined | GymDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GymPayload, S>

export type GymCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GymFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GymCountAggregateInputType | true
  }

export interface GymDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Gym'], meta: { name: 'Gym' } }
  /**
   * Find zero or one Gym that matches the filter.
   * @param {GymFindUniqueArgs} args - Arguments to find a Gym
   * @example
   * // Get one Gym
   * const gym = await prisma.gym.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GymFindUniqueArgs>(args: Prisma.SelectSubset<T, GymFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GymClient<runtime.Types.Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Gym that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GymFindUniqueOrThrowArgs} args - Arguments to find a Gym
   * @example
   * // Get one Gym
   * const gym = await prisma.gym.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GymFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GymFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GymClient<runtime.Types.Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Gym that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GymFindFirstArgs} args - Arguments to find a Gym
   * @example
   * // Get one Gym
   * const gym = await prisma.gym.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GymFindFirstArgs>(args?: Prisma.SelectSubset<T, GymFindFirstArgs<ExtArgs>>): Prisma.Prisma__GymClient<runtime.Types.Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Gym that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GymFindFirstOrThrowArgs} args - Arguments to find a Gym
   * @example
   * // Get one Gym
   * const gym = await prisma.gym.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GymFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GymFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GymClient<runtime.Types.Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Gyms that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GymFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Gyms
   * const gyms = await prisma.gym.findMany()
   * 
   * // Get first 10 Gyms
   * const gyms = await prisma.gym.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const gymWithIdOnly = await prisma.gym.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GymFindManyArgs>(args?: Prisma.SelectSubset<T, GymFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Gym.
   * @param {GymCreateArgs} args - Arguments to create a Gym.
   * @example
   * // Create one Gym
   * const Gym = await prisma.gym.create({
   *   data: {
   *     // ... data to create a Gym
   *   }
   * })
   * 
   */
  create<T extends GymCreateArgs>(args: Prisma.SelectSubset<T, GymCreateArgs<ExtArgs>>): Prisma.Prisma__GymClient<runtime.Types.Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Gyms.
   * @param {GymCreateManyArgs} args - Arguments to create many Gyms.
   * @example
   * // Create many Gyms
   * const gym = await prisma.gym.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GymCreateManyArgs>(args?: Prisma.SelectSubset<T, GymCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Gyms and returns the data saved in the database.
   * @param {GymCreateManyAndReturnArgs} args - Arguments to create many Gyms.
   * @example
   * // Create many Gyms
   * const gym = await prisma.gym.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Gyms and only return the `id`
   * const gymWithIdOnly = await prisma.gym.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GymCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GymCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Gym.
   * @param {GymDeleteArgs} args - Arguments to delete one Gym.
   * @example
   * // Delete one Gym
   * const Gym = await prisma.gym.delete({
   *   where: {
   *     // ... filter to delete one Gym
   *   }
   * })
   * 
   */
  delete<T extends GymDeleteArgs>(args: Prisma.SelectSubset<T, GymDeleteArgs<ExtArgs>>): Prisma.Prisma__GymClient<runtime.Types.Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Gym.
   * @param {GymUpdateArgs} args - Arguments to update one Gym.
   * @example
   * // Update one Gym
   * const gym = await prisma.gym.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GymUpdateArgs>(args: Prisma.SelectSubset<T, GymUpdateArgs<ExtArgs>>): Prisma.Prisma__GymClient<runtime.Types.Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Gyms.
   * @param {GymDeleteManyArgs} args - Arguments to filter Gyms to delete.
   * @example
   * // Delete a few Gyms
   * const { count } = await prisma.gym.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GymDeleteManyArgs>(args?: Prisma.SelectSubset<T, GymDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Gyms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GymUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Gyms
   * const gym = await prisma.gym.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GymUpdateManyArgs>(args: Prisma.SelectSubset<T, GymUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Gyms and returns the data updated in the database.
   * @param {GymUpdateManyAndReturnArgs} args - Arguments to update many Gyms.
   * @example
   * // Update many Gyms
   * const gym = await prisma.gym.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Gyms and only return the `id`
   * const gymWithIdOnly = await prisma.gym.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GymUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GymUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Gym.
   * @param {GymUpsertArgs} args - Arguments to update or create a Gym.
   * @example
   * // Update or create a Gym
   * const gym = await prisma.gym.upsert({
   *   create: {
   *     // ... data to create a Gym
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Gym we want to update
   *   }
   * })
   */
  upsert<T extends GymUpsertArgs>(args: Prisma.SelectSubset<T, GymUpsertArgs<ExtArgs>>): Prisma.Prisma__GymClient<runtime.Types.Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Gyms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GymCountArgs} args - Arguments to filter Gyms to count.
   * @example
   * // Count the number of Gyms
   * const count = await prisma.gym.count({
   *   where: {
   *     // ... the filter for the Gyms we want to count
   *   }
   * })
  **/
  count<T extends GymCountArgs>(
    args?: Prisma.Subset<T, GymCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GymCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Gym.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GymAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GymAggregateArgs>(args: Prisma.Subset<T, GymAggregateArgs>): Prisma.PrismaPromise<GetGymAggregateType<T>>

  /**
   * Group by Gym.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GymGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GymGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GymGroupByArgs['orderBy'] }
      : { orderBy?: GymGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GymGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGymGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Gym model
 */
readonly fields: GymFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Gym.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GymClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Gym model
 */
export interface GymFieldRefs {
  readonly id: Prisma.FieldRef<"Gym", 'String'>
  readonly title: Prisma.FieldRef<"Gym", 'String'>
  readonly description: Prisma.FieldRef<"Gym", 'String'>
  readonly phone: Prisma.FieldRef<"Gym", 'String'>
  readonly latitude: Prisma.FieldRef<"Gym", 'Decimal'>
  readonly longitude: Prisma.FieldRef<"Gym", 'Decimal'>
}
    

// Custom InputTypes
/**
 * Gym findUnique
 */
export type GymFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Gym
   */
  select?: Prisma.GymSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Gym
   */
  omit?: Prisma.GymOmit<ExtArgs> | null
  /**
   * Filter, which Gym to fetch.
   */
  where: Prisma.GymWhereUniqueInput
}

/**
 * Gym findUniqueOrThrow
 */
export type GymFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Gym
   */
  select?: Prisma.GymSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Gym
   */
  omit?: Prisma.GymOmit<ExtArgs> | null
  /**
   * Filter, which Gym to fetch.
   */
  where: Prisma.GymWhereUniqueInput
}

/**
 * Gym findFirst
 */
export type GymFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Gym
   */
  select?: Prisma.GymSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Gym
   */
  omit?: Prisma.GymOmit<ExtArgs> | null
  /**
   * Filter, which Gym to fetch.
   */
  where?: Prisma.GymWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Gyms to fetch.
   */
  orderBy?: Prisma.GymOrderByWithRelationInput | Prisma.GymOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Gyms.
   */
  cursor?: Prisma.GymWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Gyms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Gyms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Gyms.
   */
  distinct?: Prisma.GymScalarFieldEnum | Prisma.GymScalarFieldEnum[]
}

/**
 * Gym findFirstOrThrow
 */
export type GymFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Gym
   */
  select?: Prisma.GymSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Gym
   */
  omit?: Prisma.GymOmit<ExtArgs> | null
  /**
   * Filter, which Gym to fetch.
   */
  where?: Prisma.GymWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Gyms to fetch.
   */
  orderBy?: Prisma.GymOrderByWithRelationInput | Prisma.GymOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Gyms.
   */
  cursor?: Prisma.GymWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Gyms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Gyms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Gyms.
   */
  distinct?: Prisma.GymScalarFieldEnum | Prisma.GymScalarFieldEnum[]
}

/**
 * Gym findMany
 */
export type GymFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Gym
   */
  select?: Prisma.GymSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Gym
   */
  omit?: Prisma.GymOmit<ExtArgs> | null
  /**
   * Filter, which Gyms to fetch.
   */
  where?: Prisma.GymWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Gyms to fetch.
   */
  orderBy?: Prisma.GymOrderByWithRelationInput | Prisma.GymOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Gyms.
   */
  cursor?: Prisma.GymWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Gyms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Gyms.
   */
  skip?: number
  distinct?: Prisma.GymScalarFieldEnum | Prisma.GymScalarFieldEnum[]
}

/**
 * Gym create
 */
export type GymCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Gym
   */
  select?: Prisma.GymSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Gym
   */
  omit?: Prisma.GymOmit<ExtArgs> | null
  /**
   * The data needed to create a Gym.
   */
  data: Prisma.XOR<Prisma.GymCreateInput, Prisma.GymUncheckedCreateInput>
}

/**
 * Gym createMany
 */
export type GymCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Gyms.
   */
  data: Prisma.GymCreateManyInput | Prisma.GymCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Gym createManyAndReturn
 */
export type GymCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Gym
   */
  select?: Prisma.GymSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Gym
   */
  omit?: Prisma.GymOmit<ExtArgs> | null
  /**
   * The data used to create many Gyms.
   */
  data: Prisma.GymCreateManyInput | Prisma.GymCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Gym update
 */
export type GymUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Gym
   */
  select?: Prisma.GymSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Gym
   */
  omit?: Prisma.GymOmit<ExtArgs> | null
  /**
   * The data needed to update a Gym.
   */
  data: Prisma.XOR<Prisma.GymUpdateInput, Prisma.GymUncheckedUpdateInput>
  /**
   * Choose, which Gym to update.
   */
  where: Prisma.GymWhereUniqueInput
}

/**
 * Gym updateMany
 */
export type GymUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Gyms.
   */
  data: Prisma.XOR<Prisma.GymUpdateManyMutationInput, Prisma.GymUncheckedUpdateManyInput>
  /**
   * Filter which Gyms to update
   */
  where?: Prisma.GymWhereInput
  /**
   * Limit how many Gyms to update.
   */
  limit?: number
}

/**
 * Gym updateManyAndReturn
 */
export type GymUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Gym
   */
  select?: Prisma.GymSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Gym
   */
  omit?: Prisma.GymOmit<ExtArgs> | null
  /**
   * The data used to update Gyms.
   */
  data: Prisma.XOR<Prisma.GymUpdateManyMutationInput, Prisma.GymUncheckedUpdateManyInput>
  /**
   * Filter which Gyms to update
   */
  where?: Prisma.GymWhereInput
  /**
   * Limit how many Gyms to update.
   */
  limit?: number
}

/**
 * Gym upsert
 */
export type GymUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Gym
   */
  select?: Prisma.GymSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Gym
   */
  omit?: Prisma.GymOmit<ExtArgs> | null
  /**
   * The filter to search for the Gym to update in case it exists.
   */
  where: Prisma.GymWhereUniqueInput
  /**
   * In case the Gym found by the `where` argument doesn't exist, create a new Gym with this data.
   */
  create: Prisma.XOR<Prisma.GymCreateInput, Prisma.GymUncheckedCreateInput>
  /**
   * In case the Gym was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GymUpdateInput, Prisma.GymUncheckedUpdateInput>
}

/**
 * Gym delete
 */
export type GymDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Gym
   */
  select?: Prisma.GymSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Gym
   */
  omit?: Prisma.GymOmit<ExtArgs> | null
  /**
   * Filter which Gym to delete.
   */
  where: Prisma.GymWhereUniqueInput
}

/**
 * Gym deleteMany
 */
export type GymDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Gyms to delete
   */
  where?: Prisma.GymWhereInput
  /**
   * Limit how many Gyms to delete.
   */
  limit?: number
}

/**
 * Gym without action
 */
export type GymDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Gym
   */
  select?: Prisma.GymSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Gym
   */
  omit?: Prisma.GymOmit<ExtArgs> | null
}
