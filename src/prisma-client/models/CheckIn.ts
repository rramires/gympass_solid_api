
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `CheckIn` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model CheckIn
 * 
 */
export type CheckInModel = runtime.Types.Result.DefaultSelection<Prisma.$CheckInPayload>

export type AggregateCheckIn = {
  _count: CheckInCountAggregateOutputType | null
  _min: CheckInMinAggregateOutputType | null
  _max: CheckInMaxAggregateOutputType | null
}

export type CheckInMinAggregateOutputType = {
  id: string | null
  created_at: Date | null
  validated_ad: Date | null
}

export type CheckInMaxAggregateOutputType = {
  id: string | null
  created_at: Date | null
  validated_ad: Date | null
}

export type CheckInCountAggregateOutputType = {
  id: number
  created_at: number
  validated_ad: number
  _all: number
}


export type CheckInMinAggregateInputType = {
  id?: true
  created_at?: true
  validated_ad?: true
}

export type CheckInMaxAggregateInputType = {
  id?: true
  created_at?: true
  validated_ad?: true
}

export type CheckInCountAggregateInputType = {
  id?: true
  created_at?: true
  validated_ad?: true
  _all?: true
}

export type CheckInAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CheckIn to aggregate.
   */
  where?: Prisma.CheckInWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CheckIns to fetch.
   */
  orderBy?: Prisma.CheckInOrderByWithRelationInput | Prisma.CheckInOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CheckInWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CheckIns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CheckIns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CheckIns
  **/
  _count?: true | CheckInCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CheckInMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CheckInMaxAggregateInputType
}

export type GetCheckInAggregateType<T extends CheckInAggregateArgs> = {
      [P in keyof T & keyof AggregateCheckIn]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCheckIn[P]>
    : Prisma.GetScalarType<T[P], AggregateCheckIn[P]>
}




export type CheckInGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CheckInWhereInput
  orderBy?: Prisma.CheckInOrderByWithAggregationInput | Prisma.CheckInOrderByWithAggregationInput[]
  by: Prisma.CheckInScalarFieldEnum[] | Prisma.CheckInScalarFieldEnum
  having?: Prisma.CheckInScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CheckInCountAggregateInputType | true
  _min?: CheckInMinAggregateInputType
  _max?: CheckInMaxAggregateInputType
}

export type CheckInGroupByOutputType = {
  id: string
  created_at: Date
  validated_ad: Date | null
  _count: CheckInCountAggregateOutputType | null
  _min: CheckInMinAggregateOutputType | null
  _max: CheckInMaxAggregateOutputType | null
}

type GetCheckInGroupByPayload<T extends CheckInGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CheckInGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CheckInGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CheckInGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CheckInGroupByOutputType[P]>
      }
    >
  > 



export type CheckInWhereInput = {
  AND?: Prisma.CheckInWhereInput | Prisma.CheckInWhereInput[]
  OR?: Prisma.CheckInWhereInput[]
  NOT?: Prisma.CheckInWhereInput | Prisma.CheckInWhereInput[]
  id?: Prisma.StringFilter<"CheckIn"> | string
  created_at?: Prisma.DateTimeFilter<"CheckIn"> | Date | string
  validated_ad?: Prisma.DateTimeNullableFilter<"CheckIn"> | Date | string | null
}

export type CheckInOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  validated_ad?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type CheckInWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CheckInWhereInput | Prisma.CheckInWhereInput[]
  OR?: Prisma.CheckInWhereInput[]
  NOT?: Prisma.CheckInWhereInput | Prisma.CheckInWhereInput[]
  created_at?: Prisma.DateTimeFilter<"CheckIn"> | Date | string
  validated_ad?: Prisma.DateTimeNullableFilter<"CheckIn"> | Date | string | null
}, "id">

export type CheckInOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  validated_ad?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.CheckInCountOrderByAggregateInput
  _max?: Prisma.CheckInMaxOrderByAggregateInput
  _min?: Prisma.CheckInMinOrderByAggregateInput
}

export type CheckInScalarWhereWithAggregatesInput = {
  AND?: Prisma.CheckInScalarWhereWithAggregatesInput | Prisma.CheckInScalarWhereWithAggregatesInput[]
  OR?: Prisma.CheckInScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CheckInScalarWhereWithAggregatesInput | Prisma.CheckInScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CheckIn"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"CheckIn"> | Date | string
  validated_ad?: Prisma.DateTimeNullableWithAggregatesFilter<"CheckIn"> | Date | string | null
}

export type CheckInCreateInput = {
  id?: string
  created_at?: Date | string
  validated_ad?: Date | string | null
}

export type CheckInUncheckedCreateInput = {
  id?: string
  created_at?: Date | string
  validated_ad?: Date | string | null
}

export type CheckInUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  validated_ad?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type CheckInUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  validated_ad?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type CheckInCreateManyInput = {
  id?: string
  created_at?: Date | string
  validated_ad?: Date | string | null
}

export type CheckInUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  validated_ad?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type CheckInUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  validated_ad?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type CheckInCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  validated_ad?: Prisma.SortOrder
}

export type CheckInMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  validated_ad?: Prisma.SortOrder
}

export type CheckInMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  validated_ad?: Prisma.SortOrder
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}



export type CheckInSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  created_at?: boolean
  validated_ad?: boolean
}, ExtArgs["result"]["checkIn"]>

export type CheckInSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  created_at?: boolean
  validated_ad?: boolean
}, ExtArgs["result"]["checkIn"]>

export type CheckInSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  created_at?: boolean
  validated_ad?: boolean
}, ExtArgs["result"]["checkIn"]>

export type CheckInSelectScalar = {
  id?: boolean
  created_at?: boolean
  validated_ad?: boolean
}

export type CheckInOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "created_at" | "validated_ad", ExtArgs["result"]["checkIn"]>

export type $CheckInPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CheckIn"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    created_at: Date
    validated_ad: Date | null
  }, ExtArgs["result"]["checkIn"]>
  composites: {}
}

export type CheckInGetPayload<S extends boolean | null | undefined | CheckInDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CheckInPayload, S>

export type CheckInCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CheckInFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CheckInCountAggregateInputType | true
  }

export interface CheckInDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CheckIn'], meta: { name: 'CheckIn' } }
  /**
   * Find zero or one CheckIn that matches the filter.
   * @param {CheckInFindUniqueArgs} args - Arguments to find a CheckIn
   * @example
   * // Get one CheckIn
   * const checkIn = await prisma.checkIn.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CheckInFindUniqueArgs>(args: Prisma.SelectSubset<T, CheckInFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CheckInClient<runtime.Types.Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CheckIn that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CheckInFindUniqueOrThrowArgs} args - Arguments to find a CheckIn
   * @example
   * // Get one CheckIn
   * const checkIn = await prisma.checkIn.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CheckInFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CheckInFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CheckInClient<runtime.Types.Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CheckIn that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CheckInFindFirstArgs} args - Arguments to find a CheckIn
   * @example
   * // Get one CheckIn
   * const checkIn = await prisma.checkIn.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CheckInFindFirstArgs>(args?: Prisma.SelectSubset<T, CheckInFindFirstArgs<ExtArgs>>): Prisma.Prisma__CheckInClient<runtime.Types.Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CheckIn that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CheckInFindFirstOrThrowArgs} args - Arguments to find a CheckIn
   * @example
   * // Get one CheckIn
   * const checkIn = await prisma.checkIn.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CheckInFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CheckInFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CheckInClient<runtime.Types.Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CheckIns that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CheckInFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CheckIns
   * const checkIns = await prisma.checkIn.findMany()
   * 
   * // Get first 10 CheckIns
   * const checkIns = await prisma.checkIn.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const checkInWithIdOnly = await prisma.checkIn.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CheckInFindManyArgs>(args?: Prisma.SelectSubset<T, CheckInFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CheckIn.
   * @param {CheckInCreateArgs} args - Arguments to create a CheckIn.
   * @example
   * // Create one CheckIn
   * const CheckIn = await prisma.checkIn.create({
   *   data: {
   *     // ... data to create a CheckIn
   *   }
   * })
   * 
   */
  create<T extends CheckInCreateArgs>(args: Prisma.SelectSubset<T, CheckInCreateArgs<ExtArgs>>): Prisma.Prisma__CheckInClient<runtime.Types.Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CheckIns.
   * @param {CheckInCreateManyArgs} args - Arguments to create many CheckIns.
   * @example
   * // Create many CheckIns
   * const checkIn = await prisma.checkIn.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CheckInCreateManyArgs>(args?: Prisma.SelectSubset<T, CheckInCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CheckIns and returns the data saved in the database.
   * @param {CheckInCreateManyAndReturnArgs} args - Arguments to create many CheckIns.
   * @example
   * // Create many CheckIns
   * const checkIn = await prisma.checkIn.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CheckIns and only return the `id`
   * const checkInWithIdOnly = await prisma.checkIn.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CheckInCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CheckInCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CheckIn.
   * @param {CheckInDeleteArgs} args - Arguments to delete one CheckIn.
   * @example
   * // Delete one CheckIn
   * const CheckIn = await prisma.checkIn.delete({
   *   where: {
   *     // ... filter to delete one CheckIn
   *   }
   * })
   * 
   */
  delete<T extends CheckInDeleteArgs>(args: Prisma.SelectSubset<T, CheckInDeleteArgs<ExtArgs>>): Prisma.Prisma__CheckInClient<runtime.Types.Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CheckIn.
   * @param {CheckInUpdateArgs} args - Arguments to update one CheckIn.
   * @example
   * // Update one CheckIn
   * const checkIn = await prisma.checkIn.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CheckInUpdateArgs>(args: Prisma.SelectSubset<T, CheckInUpdateArgs<ExtArgs>>): Prisma.Prisma__CheckInClient<runtime.Types.Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CheckIns.
   * @param {CheckInDeleteManyArgs} args - Arguments to filter CheckIns to delete.
   * @example
   * // Delete a few CheckIns
   * const { count } = await prisma.checkIn.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CheckInDeleteManyArgs>(args?: Prisma.SelectSubset<T, CheckInDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CheckIns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CheckInUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CheckIns
   * const checkIn = await prisma.checkIn.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CheckInUpdateManyArgs>(args: Prisma.SelectSubset<T, CheckInUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CheckIns and returns the data updated in the database.
   * @param {CheckInUpdateManyAndReturnArgs} args - Arguments to update many CheckIns.
   * @example
   * // Update many CheckIns
   * const checkIn = await prisma.checkIn.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CheckIns and only return the `id`
   * const checkInWithIdOnly = await prisma.checkIn.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CheckInUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CheckInUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CheckIn.
   * @param {CheckInUpsertArgs} args - Arguments to update or create a CheckIn.
   * @example
   * // Update or create a CheckIn
   * const checkIn = await prisma.checkIn.upsert({
   *   create: {
   *     // ... data to create a CheckIn
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CheckIn we want to update
   *   }
   * })
   */
  upsert<T extends CheckInUpsertArgs>(args: Prisma.SelectSubset<T, CheckInUpsertArgs<ExtArgs>>): Prisma.Prisma__CheckInClient<runtime.Types.Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CheckIns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CheckInCountArgs} args - Arguments to filter CheckIns to count.
   * @example
   * // Count the number of CheckIns
   * const count = await prisma.checkIn.count({
   *   where: {
   *     // ... the filter for the CheckIns we want to count
   *   }
   * })
  **/
  count<T extends CheckInCountArgs>(
    args?: Prisma.Subset<T, CheckInCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CheckInCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CheckIn.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CheckInAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CheckInAggregateArgs>(args: Prisma.Subset<T, CheckInAggregateArgs>): Prisma.PrismaPromise<GetCheckInAggregateType<T>>

  /**
   * Group by CheckIn.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CheckInGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CheckInGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CheckInGroupByArgs['orderBy'] }
      : { orderBy?: CheckInGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CheckInGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCheckInGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CheckIn model
 */
readonly fields: CheckInFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CheckIn.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CheckInClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CheckIn model
 */
export interface CheckInFieldRefs {
  readonly id: Prisma.FieldRef<"CheckIn", 'String'>
  readonly created_at: Prisma.FieldRef<"CheckIn", 'DateTime'>
  readonly validated_ad: Prisma.FieldRef<"CheckIn", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CheckIn findUnique
 */
export type CheckInFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CheckIn
   */
  select?: Prisma.CheckInSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CheckIn
   */
  omit?: Prisma.CheckInOmit<ExtArgs> | null
  /**
   * Filter, which CheckIn to fetch.
   */
  where: Prisma.CheckInWhereUniqueInput
}

/**
 * CheckIn findUniqueOrThrow
 */
export type CheckInFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CheckIn
   */
  select?: Prisma.CheckInSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CheckIn
   */
  omit?: Prisma.CheckInOmit<ExtArgs> | null
  /**
   * Filter, which CheckIn to fetch.
   */
  where: Prisma.CheckInWhereUniqueInput
}

/**
 * CheckIn findFirst
 */
export type CheckInFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CheckIn
   */
  select?: Prisma.CheckInSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CheckIn
   */
  omit?: Prisma.CheckInOmit<ExtArgs> | null
  /**
   * Filter, which CheckIn to fetch.
   */
  where?: Prisma.CheckInWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CheckIns to fetch.
   */
  orderBy?: Prisma.CheckInOrderByWithRelationInput | Prisma.CheckInOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CheckIns.
   */
  cursor?: Prisma.CheckInWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CheckIns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CheckIns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CheckIns.
   */
  distinct?: Prisma.CheckInScalarFieldEnum | Prisma.CheckInScalarFieldEnum[]
}

/**
 * CheckIn findFirstOrThrow
 */
export type CheckInFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CheckIn
   */
  select?: Prisma.CheckInSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CheckIn
   */
  omit?: Prisma.CheckInOmit<ExtArgs> | null
  /**
   * Filter, which CheckIn to fetch.
   */
  where?: Prisma.CheckInWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CheckIns to fetch.
   */
  orderBy?: Prisma.CheckInOrderByWithRelationInput | Prisma.CheckInOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CheckIns.
   */
  cursor?: Prisma.CheckInWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CheckIns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CheckIns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CheckIns.
   */
  distinct?: Prisma.CheckInScalarFieldEnum | Prisma.CheckInScalarFieldEnum[]
}

/**
 * CheckIn findMany
 */
export type CheckInFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CheckIn
   */
  select?: Prisma.CheckInSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CheckIn
   */
  omit?: Prisma.CheckInOmit<ExtArgs> | null
  /**
   * Filter, which CheckIns to fetch.
   */
  where?: Prisma.CheckInWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CheckIns to fetch.
   */
  orderBy?: Prisma.CheckInOrderByWithRelationInput | Prisma.CheckInOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CheckIns.
   */
  cursor?: Prisma.CheckInWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CheckIns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CheckIns.
   */
  skip?: number
  distinct?: Prisma.CheckInScalarFieldEnum | Prisma.CheckInScalarFieldEnum[]
}

/**
 * CheckIn create
 */
export type CheckInCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CheckIn
   */
  select?: Prisma.CheckInSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CheckIn
   */
  omit?: Prisma.CheckInOmit<ExtArgs> | null
  /**
   * The data needed to create a CheckIn.
   */
  data?: Prisma.XOR<Prisma.CheckInCreateInput, Prisma.CheckInUncheckedCreateInput>
}

/**
 * CheckIn createMany
 */
export type CheckInCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CheckIns.
   */
  data: Prisma.CheckInCreateManyInput | Prisma.CheckInCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CheckIn createManyAndReturn
 */
export type CheckInCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CheckIn
   */
  select?: Prisma.CheckInSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CheckIn
   */
  omit?: Prisma.CheckInOmit<ExtArgs> | null
  /**
   * The data used to create many CheckIns.
   */
  data: Prisma.CheckInCreateManyInput | Prisma.CheckInCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CheckIn update
 */
export type CheckInUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CheckIn
   */
  select?: Prisma.CheckInSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CheckIn
   */
  omit?: Prisma.CheckInOmit<ExtArgs> | null
  /**
   * The data needed to update a CheckIn.
   */
  data: Prisma.XOR<Prisma.CheckInUpdateInput, Prisma.CheckInUncheckedUpdateInput>
  /**
   * Choose, which CheckIn to update.
   */
  where: Prisma.CheckInWhereUniqueInput
}

/**
 * CheckIn updateMany
 */
export type CheckInUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CheckIns.
   */
  data: Prisma.XOR<Prisma.CheckInUpdateManyMutationInput, Prisma.CheckInUncheckedUpdateManyInput>
  /**
   * Filter which CheckIns to update
   */
  where?: Prisma.CheckInWhereInput
  /**
   * Limit how many CheckIns to update.
   */
  limit?: number
}

/**
 * CheckIn updateManyAndReturn
 */
export type CheckInUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CheckIn
   */
  select?: Prisma.CheckInSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CheckIn
   */
  omit?: Prisma.CheckInOmit<ExtArgs> | null
  /**
   * The data used to update CheckIns.
   */
  data: Prisma.XOR<Prisma.CheckInUpdateManyMutationInput, Prisma.CheckInUncheckedUpdateManyInput>
  /**
   * Filter which CheckIns to update
   */
  where?: Prisma.CheckInWhereInput
  /**
   * Limit how many CheckIns to update.
   */
  limit?: number
}

/**
 * CheckIn upsert
 */
export type CheckInUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CheckIn
   */
  select?: Prisma.CheckInSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CheckIn
   */
  omit?: Prisma.CheckInOmit<ExtArgs> | null
  /**
   * The filter to search for the CheckIn to update in case it exists.
   */
  where: Prisma.CheckInWhereUniqueInput
  /**
   * In case the CheckIn found by the `where` argument doesn't exist, create a new CheckIn with this data.
   */
  create: Prisma.XOR<Prisma.CheckInCreateInput, Prisma.CheckInUncheckedCreateInput>
  /**
   * In case the CheckIn was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CheckInUpdateInput, Prisma.CheckInUncheckedUpdateInput>
}

/**
 * CheckIn delete
 */
export type CheckInDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CheckIn
   */
  select?: Prisma.CheckInSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CheckIn
   */
  omit?: Prisma.CheckInOmit<ExtArgs> | null
  /**
   * Filter which CheckIn to delete.
   */
  where: Prisma.CheckInWhereUniqueInput
}

/**
 * CheckIn deleteMany
 */
export type CheckInDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CheckIns to delete
   */
  where?: Prisma.CheckInWhereInput
  /**
   * Limit how many CheckIns to delete.
   */
  limit?: number
}

/**
 * CheckIn without action
 */
export type CheckInDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CheckIn
   */
  select?: Prisma.CheckInSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CheckIn
   */
  omit?: Prisma.CheckInOmit<ExtArgs> | null
}
